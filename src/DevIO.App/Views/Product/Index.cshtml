@model IEnumerable<DevIO.App.ViewModels.ProductViewModel>

@{
    ViewData["Title"] = "Lista de Produtos";
}

<h1>@ViewData["Title"]</h1>

<hr />
<p>
    <a class="btn btn-info" asp-action="Create">Novo Produto</a>
</p>
<table class="table table-hover" id="productsTable">
    <thead class="thead-dark">
        <tr>
            <th>

            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Provider)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Active)
            </th>
            <th></th>
        </tr>
    </thead>
    @*<tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Provider.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Price)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Active)
                    </td>
                    <td>
                        <a class="btn btn-warning" asp-action="Details" asp-route-id="@item.Id">Detalhes</a> |
                        <a class="btn btn-warning" asp-action="Edit" asp-route-id="@item.Id">Editar</a> |
                        <a class="btn btn-danger" asp-action="Delete" asp-route-id="@item.Id">Excluir</a>
                    </td>
                </tr>
            }
        </tbody>*@
</table>
@section Scripts{
    @*<script>
            $(document).ready(function () {
                $('#productsTable').DataTable();
            });
        </script>*@

    <script>
        //
        // Pipelining function for DataTables. To be used to the `ajax` option of DataTables
        // Copied from https://datatables.net/examples/server_side/pipeline.html
        //
        $.fn.dataTable.pipeline = function (opts) {
            // Configuration options
            var conf = $.extend({
                pages: 5,     // number of pages to cache. That means action(url) will be called in 1st, 6th, 11th ... pages
                url: 'Product/GetFilteredItems', // url to controller action
                data: null,   // function or object with parameters to send to the server
                method: 'GET' // Ajax HTTP method
            }, opts);

            // Private variables for storing the cache
            var cacheLower = -1;
            var cacheUpper = null;
            var cacheLastRequest = null;
            var cacheLastJson = null;

            return function (request, drawCallback, settings) {
                var ajax = false;
                var requestStart = request.start;
                var drawStart = request.start;
                var requestLength = request.length;
                var requestEnd = requestStart + requestLength;

                if (settings.clearCache) {
                    // API requested that the cache be cleared
                    ajax = true;
                    settings.clearCache = false;
                }
                else if (cacheLower < 0 || requestStart < cacheLower || requestEnd > cacheUpper) {
                    // outside cached data - need to make a request
                    ajax = true;
                }
                else if (JSON.stringify(request.order) !== JSON.stringify(cacheLastRequest.order) ||
                    JSON.stringify(request.columns) !== JSON.stringify(cacheLastRequest.columns) ||
                    JSON.stringify(request.search) !== JSON.stringify(cacheLastRequest.search)
                ) {
                    // properties changed (ordering, columns, searching)
                    ajax = true;
                }

                // Store the request for checking next time around
                cacheLastRequest = $.extend(true, {}, request);

                if (ajax) {
                    // Need data from the server
                    if (requestStart < cacheLower) {
                        requestStart = requestStart - (requestLength * (conf.pages - 1));

                        if (requestStart < 0) {
                            requestStart = 0;
                        }
                    }

                    cacheLower = requestStart;
                    cacheUpper = requestStart + (requestLength * conf.pages);

                    request.start = requestStart;
                    request.length = requestLength * conf.pages;

                    // Provide the same `data` options as DataTables.
                    if (typeof conf.data === 'function') {
                        // As a function it is executed with the data object as an arg
                        // for manipulation. If an object is returned, it is used as the
                        // data object to submit
                        var d = conf.data(request);
                        if (d) {
                            $.extend(request, d);
                        }
                    }
                    else if ($.isPlainObject(conf.data)) {
                        // As an object, the data given extends the default
                        $.extend(request, conf.data);
                    }

                    settings.jqXHR = $.ajax({
                        "type": conf.method,
                        "url": conf.url,
                        "data": request,
                        "dataType": "json",
                        "cache": false,
                        "success": function (json) {
                            cacheLastJson = $.extend(true, {}, json);

                            if (cacheLower != drawStart) {
                                json.data.splice(0, drawStart - cacheLower);
                            }
                            if (requestLength >= -1) {
                                json.data.splice(requestLength, json.data.length);
                            }

                            drawCallback(json);
                        }
                    });
                }
                else {
                    json = $.extend(true, {}, cacheLastJson);
                    json.draw = request.draw; // Update the echo for each response
                    json.data.splice(0, requestStart - cacheLower);
                    json.data.splice(requestLength, json.data.length);

                    drawCallback(json);
                }
            }
        };

        // Register an API method that will empty the pipelined data, forcing an Ajax
        // fetch on the next draw (i.e. `table.clearPipeline().draw()`)
        // Copied from https://datatables.net/examples/server_side/pipeline.html
        $.fn.dataTable.Api.register('clearPipeline()', function () {
            return this.iterator('table', function (settings) {
                settings.clearCache = true;
            });
        });
        //
        // DataTables initialization
        // Copied from https://datatables.net/examples/server_side/pipeline.html
        // Updated according to our data
        //
        $(document).ready(function () {
            $('#productsTable').DataTable({
                "processing": true,
                "serverSide": true,
                "searching": true,
                "paging": true,
                "ajax": $.fn.dataTable.pipeline({
                    url: 'Product/GetFilteredItems',
                    pages: 5 //number of pages to cache
                }),
                //Column definitions are sent to action to be used in sorted column definition
                //name parts are assigned as the exact property name to determine sort columns
                // render definition has been given to display format of CreatedDate property
                "columns": [
                    // For Student.Id
                    { "data": "id", "name": "Id" },
                    // For Student.Firstname
                    { "data": "name", "name": "Name" },
                    // For Student.Lastname
                    //{ "data": "lastname", "name": "Lastname" },
                    // For Student.CreatedDate
                    {
                        "data": "createdDate", "name": "CreatedDate",
                        "render": function (data) {
                            var date = new Date(data);
                            return date.toLocaleString();
                        }
                    },
                    // Optional: Buttons For Action Listeners
                    {
                        'data': null,
                        'render': function (data, type, row) {
                            return '<button id="' + row.id + '" onclick="detailsClick(this)">Details</button>'
                                + '<button id="' + row.id + '" onclick="editClick(this)">Edit</button>'
                                + '<button id="' + row.id + '" onclick="deleteClick(this)">Delete</button>'
                        }
                    }
                ],
                language: {
                    //processing: '<div class="spinner"></div>', // Optional to use loading spinner. Instead of it you can define a simple string.
                    zeroRecords: "No matching records found"
                }
            });
        });

        //Optional: Details button listener
        function detailsClick(obj) {
            //var rowID = $(obj).attr('id');
            var studentId = $(obj).closest('tr').find('td:first').html();
            alert("Id = " + studentId + " for details");
        }
        // Optional: Edit button listener
        function editClick(obj) {
            //var rowID = $(obj).attr('id');
            var studentId = $(obj).closest('tr').find('td:first').html();
            alert("Id = " + studentId + " for edit");
        }
        // Optional: Delete button listener
        function deleteClick(obj) {
            //var rowID = $(obj).attr('id');
            var studentId = $(obj).closest('tr').find('td:first').html();
            alert("Id = " + studentId + " for delete");
        }
    </script>


}