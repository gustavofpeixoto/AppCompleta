@model DevIO.App.ViewModels.GridViewViewModel
<table id="@Html.Raw("GridView" + Model.Controller)" class="table table-striped table-hover" style="width: 100%;">
    <thead class="thead-dark">
        <tr>
            @for (int i = 0; i < Model.HeaderColumns.Length; i++)
            {
                <th>
                    @Html.Raw(Model.HeaderColumns[i])
                </th>

            }
            @if (!Model.ReadOnly)
            {
                <th>
                </th>
            }
        </tr>
    </thead>
</table>

<script>
    function initializeDataTable() {

        $.fn.dataTable.pipeline = function (opts) {
            var conf = $.extend({
                pages: '@Html.Raw(Model.PageSize)',
                url: '@Html.Raw(Model.Url)',
                data: null,
                method: 'GET'
            }, opts);

            var cacheLower = -1;
            var cacheUpper = null;
            var cacheLastRequest = null;
            var cacheLastJson = null;

            return function (request, drawCallback, settings) {
                var ajax = false;
                var requestStart = request.start;
                var drawStart = request.start;
                var requestLength = request.length;
                var requestEnd = requestStart + requestLength;

                if (settings.clearCache) {
                    ajax = true;
                    settings.clearCache = false;
                }
                else if (cacheLower < 0 || requestStart < cacheLower || requestEnd > cacheUpper) {
                    ajax = true;
                }
                else if (JSON.stringify(request.order) !== JSON.stringify(cacheLastRequest.order) ||
                    JSON.stringify(request.columns) !== JSON.stringify(cacheLastRequest.columns) ||
                    JSON.stringify(request.search) !== JSON.stringify(cacheLastRequest.search)) {
                    ajax = true;
                }

                cacheLastRequest = $.extend(true, {}, request);

                if (ajax) {
                    if (requestStart < cacheLower) {
                        requestStart = requestStart - (requestLength * (conf.pages - 1));

                        if (requestStart < 0) {
                            requestStart = 0;
                        }
                    }

                    cacheLower = requestStart;
                    cacheUpper = requestStart + (requestLength * conf.pages);

                    request.start = requestStart;
                    request.length = requestLength * conf.pages;

                    if (typeof conf.data === 'function') {
                        var d = conf.data(request);
                        if (d) {
                            $.extend(request, d);
                        }
                    }
                    else if ($.isPlainObject(conf.data)) {
                        $.extend(request, conf.data);
                    }

                    settings.jqXHR = $.ajax({
                        "type": conf.method,
                        "url": conf.url,
                        "data": request,
                        "dataType": "json",
                        "cache": false,
                        "success": function (json) {
                            cacheLastJson = $.extend(true, {}, json);

                            if (cacheLower != drawStart) {
                                json.data.splice(0, drawStart - cacheLower);
                            }
                            if (requestLength >= -1) {
                                json.data.splice(requestLength, json.data.length);
                            }

                            drawCallback(json);
                        }
                    });
                }
                else {
                    json = $.extend(true, {}, cacheLastJson);
                    json.draw = request.draw;
                    json.data.splice(0, requestStart - cacheLower);
                    json.data.splice(requestLength, json.data.length);

                    drawCallback(json);
                }
            }
        };

        $.fn.dataTable.Api.register('clearPipeline()', function () {
            return this.iterator('table', function (settings) {
                settings.clearCache = true;
            });
        });

        var domWithButtons = "<'row'<'col-sm-6'B><'col-sm-6'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-4'i><'col-sm-4 text-center'l><'col-sm-4'p>>";
        var domWithoutButtons = "<'row'<'col-sm-12'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-4'i><'col-sm-4 text-center'l><'col-sm-4'p>>";

        var dataTable =
        $(@Html.Raw("'#GridView" + Model.Controller + "'")).DataTable({
            rowReorder: {
                selector: 'td:nth-child(2)'
            },
            responsive: true,
            processing: false,
            serverSide: true,
            searching: true,
            paging: true,
            ajax: $.fn.dataTable.pipeline({
                url: @Html.Raw("'" + Model.Url + "'"),
                pages: @Html.Raw(Model.PageSize),
            }),
            @if(!Model.Exporting)
            {
            	<text>
            		dom: domWithoutButtons,
            	</text>
            }
            else
            {
            	<text>
                    dom: domWithButtons,
                    buttons: [
                        { extend: "copy", text: "Copiar"},
                        "csv",
                        "excel",
                        "pdf",
                        { extend: "print", text: "Imprimir"
                    }],
                    lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "Todos"]],
            	</text>
            }
            @if(!Model.ReadOnly)
            {
            	<text>
            	    columnDefs: [{
                		targets: @Html.Raw(Model.HeaderColumns.Length),
                		orderable: false
            		}],
            	</text>
            }
            columns: [
                @for (int i = 0; i < Model.DisplayColumns.Length; i++)
                {
                    <text>
                    {
                        data: @Html.Raw("'" + Model.DisplayColumns[i].ToLower() + "'"),
                        name: @Html.Raw("'" + Model.DisplayColumns[i] + "'"),
                        render: function (data, type, row) {
                            return getData(data);
                        }
                    },
                    </text>
                }

                @if(!Model.ReadOnly)
                {
                    <text>
                    {
                        data: null,
                        render: function (data, type, row) {
                            return '<div class="text-right">'
                                + '<a href="/Provider/Details/' + row.id + '" class="btn btn-sm btn-info"><span class="fa fa-search"></span></a>&nbsp;'
                                + '<a href="/Provider/Edit/' + row.id + '" class="btn btn-sm btn-warning"><span class="fa fa-pencil"></span></a>&nbsp;'
                                + '<a href="/Provider/Delete/' + row.id + '" class="btn btn-sm btn-danger"><span class="fa fa-trash"></span></a>'
                                + '</div>'
                        }
                    },
                    </text>
                }
            ],
            language: {
                lengthMenu: "Mostrar _MENU_ registros por página",
                zeroRecords: "Nenhum resultado encontrado",
                info: " Exibindo _START_ a _END_ de _TOTAL_ registro(s)",
                infoFiltered: "( Total de registros: _MAX_ )",
                searchPlaceholder: "Pesquisar",
                paginate: { previous: "Anterior", next: "Próxima" },
                search: ""
            },
        });

        dataTable.buttons().container()
            .appendTo('#GridViewProvider_wrapper .col-md-6:eq(0)');
    }


    function getData(data) {
        if (data == true) {
            return '<input checked="checked" class="check-box" disabled="disabled" type="checkbox">'
        }
        else if (data == false) {
            return '<input class="check-box" disabled="disabled" type="checkbox">'
        }
        else {
            return data;
        }
    }

</script>